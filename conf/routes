# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~
# all REST endpoints are prefixed with /rest/ and receive/return JSON-encoded data

GET     /                                controllers.LibraryUI.index(search: String ?= "", keyword: String ?= "", order: String ?= "name")
GET     /folder/*folder                  controllers.LibraryUI.listAssetsInFolder(folder, order: String ?= "name")
GET     /asset/*path                     controllers.LibraryUI.showAsset(path)
GET     /downloadFolder/*path            controllers.LibraryUI.downloadFolder(path)
GET     /jsroutes.js                     controllers.JavascriptRoutes.generateRoutes


GET     /rest/find                       controllers.LibraryService.search(searchType: String ?= "", search: String ?= "", order: String ?= "")
GET     /rest/asset/*path                controllers.LibraryService.getAsset(path)

POST    /rest/archive                    controllers.ArchiveBuilder.archive

#
# Auth Routes
#

GET     /login                           controllers.Auth.login
GET     /logout                          controllers.Auth.logout
POST    /authenticate                    controllers.Auth.authenticate

#
# ADMIN mode routes
#
GET     /admin/rescan                    controllers.Admin.rescan(url: String ?= "")
POST    /rest/admin/editMetadata/*asset  controllers.Admin.editMetadata(asset, description: String ?= "", keywords: String ?= "")
POST    /rest/admin/massEditMetadata/    controllers.Admin.massEditMetadata

#
# Static resources -- may be replaced by Apache or nginx in production
#
GET     /s/img/*file                     controllers.FileServer.serveImage(file)
GET     /s/file/*file                    controllers.FileServer.downloadFile(file)
GET     /s/archive/*file                 controllers.FileServer.serveArchive(file)
GET     /s/theme/*file                   controllers.FileServer.serveTheme(file)
GET     /s/web/*file                     controllers.Assets.at(path="/public", file)
